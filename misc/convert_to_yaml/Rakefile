require 'pp'
require 'yaml'
require 'fileutils'

DEFAULT_SETTING_YAML = 'setting.yml'

module BigFakeCdIndex

  BOOKS = %w<
    Colorado
    EvansBk
    JazzFake
    JazzLTD
    Library
    New[\ ]Real1
    NewReal1
    NewReal2
    NewReal3
    Realbk1
    Realbk2
    Realbk3
    TheBook
  >
  
  LETTER_REGEX      = /\A[A-Z#]\Z/
  PAGE_DELIM_REGEX  = /\ABig Fake CD — Master Index Page.*\Z/
  
  FIRST_BOOK_REGEX  = /
    \A
    (?<tune>[^.].+?)                    # tune title
    ([ ]|[ ]\.{1,2}[ ]|[ ]?\.{3,}[ ]?)  # delimiter
    (?<book>#{BOOKS * '|'}?)            # book title
    [ ]
    (?<page>[A0-9]+?)                   # page
    \Z                                  # before new line
  /x

  ANOTHER_BOOK_REGEX  = /
    \A
    \.+[ ]?                   # delimiter
    (?<book>#{BOOKS * '|'}?)  # book title
    [ ]
    (?<page>[A0-9]+?)         # page
    \Z                        # before new line
  /x
  
  DUPLICATE_TUNE_TITLE = "…"
  
  TO_PDF_PAGE_PROCS = {
    'Colorado': ->(page){ page.to_i + 3 },
    'EvansBk':  ->(page){ page.to_i + 3 },
    'JazzFake': ->(page){ page.to_i - 1 },
    'JazzLTD':  ->(page){ page.to_i + 7 },
    'Library':  ->(page){ page.to_i + 4 },
    'NewReal1': ->(page){ page.to_i + 15 },
    'NewReal2': ->(page){ page.to_i + 12 },
    'NewReal3': ->(page){ page.to_i + 10 },
    'Realbk1': ->(page)do
      if /^A(?<additional>[0-9]+)$/ =~ page
        return additional.to_i + 497
      end
      page.to_i + 13
    end,
    'Realbk2':  ->(page){ page.to_i + 7 },
    'Realbk3':  ->(page){ page.to_i + 5 },
    'TheBook': ->(page)do
      if page.to_i <= 204
        return page.to_i + 13
      end
      page.to_i + 11
    end,
  }

  BOOK_PAGE_FOR = ->(book, page)do
    book_key = book.gsub(' ', '').to_sym
    {
      book: book_key.to_s,
      page: page,
      pdf_page: TO_PDF_PAGE_PROCS[book_key][page]
    }
  end

  module_function

  def to_ruby_object(file_io)
    o = {}
    
    seperated_tune_title = nil
    current_tune = nil
    versions_tune = nil
    
    tune_title_of = ->do
      return current_tune if current_tune == versions_tune
      current_tune.sub(DUPLICATE_TUNE_TITLE, versions_tune)
    end
    
    while line = file_io.gets
      case line
      when LETTER_REGEX
        next

      when PAGE_DELIM_REGEX
        next

      when FIRST_BOOK_REGEX
        tune = $~['tune']
        book = $~['book']
        page = $~['page']
        
        current_tune = "#{seperated_tune_title}#{tune}"
        seperated_tune_title = nil
        
        versions_tune = current_tune unless current_tune =~ /^#{DUPLICATE_TUNE_TITLE}/
        
        o[tune_title_of[]] = [ BOOK_PAGE_FOR[book, page] ]

      when ANOTHER_BOOK_REGEX
        raise 'NO current_tune!' unless current_tune
      
        book = $~['book']
        page = $~['page']
        
        anogher_book_page = BOOK_PAGE_FOR[book, page]
        tune_title = tune_title_of[]

        o[tune_title] << anogher_book_page unless o[tune_title].include?(anogher_book_page)
      else
        # should be the first fragment of a long title
        seperated_tune_title = line.chomp('') + ' '
      end
    end
    o
  end

  def index_per_book(indexes)
    realbooks = indexes.values.flatten.map{|i| i[:book]}.uniq.sort
  
    to_page_num = ->(page)do
      return page.to_i if page =~ /^[0-9]+$/
      # appendix
      10000 + page.sub('A', '').to_i
    end
  
    realbooks.map do |realbook|
      containing_tunes = indexes
        .select do |tune, books|
          books.find{|book| book[:book] == realbook}
        end
        .map do |tune, books|
          page = books.find{|book| book[:book] == realbook}[:page]
          [tune, page]
        end
        .sort do |(tune_a, page_a), (tune_b, page_b)|
          p_a = to_page_num[page_a]
          p_b = to_page_num[page_b]
          
          diff_page = p_a <=> p_b
          next diff_page unless diff_page == 0
          
          tune_a <=> tune_b
        end
        
      [realbook, containing_tunes.to_h]
    end.to_h
  end
  
  def verbose(indexes, index_per_book, io: $stdout)
    begin
      realbooks = indexes.values.flatten.map{|i| i[:book]}.uniq.sort
      io.puts 
      io.puts '-- realbooks'
      io.puts realbooks

      io.puts
      io.puts '-- tunes'
      io.puts "#{indexes.keys.size} tunes"
    end

    begin
      io.puts 
      io.puts '-- many_books_tune_titles'
      
      max_books_size = indexes.map{|k, v| v.size}.max
      many_books_tune_titles = indexes
        .select{|k, v| max_books_size - 2 < v.size}
        .sort_by{|k, v| -v.size}
        .map{|title, books| "#{title} (#{books.size} books)"}
      io.puts many_books_tune_titles
      io.puts '--------'
    end

    begin
      io.puts 
      io.puts '-- long_tune_titles'
      
      longest_title_size = indexes.keys.map{|t| t.size}.max
      long_tune_titles = indexes.keys
        .select{|t| longest_title_size - 15 < t.size}
        .sort_by{|t| -t.size}
      io.puts long_tune_titles
      io.puts '--------'
    end

    begin
      io.puts 
      io.puts '-- short_tune_titles'

      shortest_title_size = indexes.keys.map{|t| t.size}.min
      short_tune_titles = indexes.keys.select{|t| shortest_title_size == t.size}
      io.puts short_tune_titles
      io.puts '--------'
    end

    begin
      io.puts 
      io.puts '-- no number pages'

      no_number_pages = indexes.values.flatten.map{|i| i[:page]}.select{|page| page =~ /[a-z]/i}
      no_number_page_include = indexes.select{|k, values| values.find{|v| no_number_pages.include?(v[:page])}}
      io.puts no_number_page_include.pretty_inspect
      io.puts '--------'
    end
    
    begin
      io.puts 
      io.puts '-- alias tunes'
    
      index_per_book.each do |realbook, containing_tunes|
        aliases = containing_tunes.select do |tune, page|
            tune =~ /[\(\)]/
          end
          .group_by do |tune, page|
            page
          end
          .select do |page, grouped|
            next false if grouped.count < 2
            # true
            grouped.map(&:first).map{|title| title.chars.sort}.uniq.size == 1
          end
        
        #------
        io.puts realbook
        io.puts aliases
      end
      io.puts '--------'
    end
  end
end


task default: :index_to_yaml 

desc "index_to_yaml"
task :index_to_yaml, ['setting_yaml'] do |task, args|
  setting_yaml = args[:setting_yaml] || DEFAULT_SETTING_YAML

  setting = YAML.load_file(setting_yaml)

  indexes = File.open(setting[:input], "r:utf-8") do |file_io|
    BigFakeCdIndex.to_ruby_object(file_io)
  end
  
  index_per_book = BigFakeCdIndex.index_per_book(indexes)

  output = setting[:output]
  
  output[:verbose]&.tap do
    BigFakeCdIndex.verbose(indexes, index_per_book)
  end
  
  output[:all_indexes]&.tap do |all_indexes|
    FileUtils.mkdir_p(File.dirname(all_indexes))
    File.write(all_indexes, indexes.to_yaml)
  end
  
  output[:indexes_per_book]&.tap do |indexes_per_book|
    FileUtils.mkdir_p(File.dirname(indexes_per_book))
    File.write(indexes_per_book, index_per_book.to_yaml)
  end
end
